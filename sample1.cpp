#include <stdio.h>
#include <iostream>
using namespace std;

void main() {
	printf("안녕 씨\n반갑습니다.\n");
	cout << "안녕 씨" << endl << "반갑습니다." << endl;

// 서식있는 출력
// printf("출력서식" , 출력할 내용); ==> 출력 서식을 제외한 나머지 문자는 입력한 그대로 출력된다.
// 출력서식의 형식 : %[-][0][n][.m]서식문자
// 서식문자 : d(정수), f(실수), c(문자), s(문자열)
// n : 데이터를 출력할 전체 자리수
// - : 데이터를 왼쪽에 맞춰서 출력한다.
// 0 : 전체 자리수가 지정된 경우 남는 자리에 0을 채워 출력한다.
// .m : 소수점 아래 자리수, 잘리는 자리에서 반올림해서 화면에 표시한다. 실제 데이터 값은 변하지 않는다.
	printf("5 + 3 = %-5d\n", 5 + 3 );
	printf("5 - 3 = %05d\n", 5 - 3);
	printf("5 * 3 = %05d\n", 5 * 3);
	printf("5 / 3 = %5d\n", 5 / 3);  //정수와 정수의 연산은 결과도 정수다.
	printf("5 / 3 = %.2f\n", 5 / 3.);
// % 문자 자체를 출력하려면 %%와 같이 2개를 연속해서 적어야 한다.
	printf("5 %% 3 = %5d\n", 5 % 3);   //나머지

	cout << "5 + 3 = " << 5 + 3 << endl;
	cout << "5 - 3 = " << 5 - 3 << endl;
	cout << "5 * 3 = " << 5 * 3 << endl;
	cout << "5 / 3 = " << 5 / 3 << endl;
	cout << "5 / 3 = " << 5. / 3 << endl;
	cout << "5 % 3 = " << 5 % 3 << endl;

// 묵시적 형변환 : 연산 결과는 크기가 큰 자료형을 자동으로 변환한다.
// C언어의 자료형
// char : 문자, 1바이트(8비트)
// short : 정수(-32768 ~ 32767), 2바이트
// int : 정수(-2147483648~ 2147483647), 4바이트
// long long int : 정수(-2의 63 ~ 2의 63승 -1), 8바이트
// float : 실수(단정도), 소수점 아래 6자리 정도를 표시한다. 4바이트
// double : 실수(배정도), 소수점 아래 16자리 정도를 표시한다. 8바이트


	cout << "A + 32 = " << 'A' + 32 << endl;
	cout << "a - 32 = " << 'a' - 32 << endl;
// 1바이트와 4바이트의 연산이므로 int로 바뀌어서 결과가 나옴
// 명시적 형변화 : 사용자가 그 순간의 자료형을 지정할 수 있다. casting

	cout << "A + 32 = " << (char)('A' + 32) << endl;
	cout << "a - 32 = " << (char)('a' - 32) << endl;

}